// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GradeServiceClient is the client API for GradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradeServiceClient interface {
	Get(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetGradeResponse, error)
	GetByGuest(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error)
	GetByGraded(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error)
	GetAll(ctx context.Context, in *GetAllGradesRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error)
	Create(ctx context.Context, in *CreateGradeRequest, opts ...grpc.CallOption) (*CreateGradeResponse, error)
	Update(ctx context.Context, in *UpdateGradeRequest, opts ...grpc.CallOption) (*UpdateGradeResponse, error)
	Delete(ctx context.Context, in *DeleteGradeRequest, opts ...grpc.CallOption) (*DeleteGradeResponse, error)
}

type gradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeServiceClient(cc grpc.ClientConnInterface) GradeServiceClient {
	return &gradeServiceClient{cc}
}

func (c *gradeServiceClient) Get(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetGradeResponse, error) {
	out := new(GetGradeResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetByGuest(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error) {
	out := new(GetAllGradesResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/GetByGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetByGraded(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error) {
	out := new(GetAllGradesResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/GetByGraded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetAll(ctx context.Context, in *GetAllGradesRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error) {
	out := new(GetAllGradesResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) Create(ctx context.Context, in *CreateGradeRequest, opts ...grpc.CallOption) (*CreateGradeResponse, error) {
	out := new(CreateGradeResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) Update(ctx context.Context, in *UpdateGradeRequest, opts ...grpc.CallOption) (*UpdateGradeResponse, error) {
	out := new(UpdateGradeResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) Delete(ctx context.Context, in *DeleteGradeRequest, opts ...grpc.CallOption) (*DeleteGradeResponse, error) {
	out := new(DeleteGradeResponse)
	err := c.cc.Invoke(ctx, "/profile.GradeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServiceServer is the server API for GradeService service.
// All implementations must embed UnimplementedGradeServiceServer
// for forward compatibility
type GradeServiceServer interface {
	Get(context.Context, *GetGradeRequest) (*GetGradeResponse, error)
	GetByGuest(context.Context, *GetGradeRequest) (*GetAllGradesResponse, error)
	GetByGraded(context.Context, *GetGradeRequest) (*GetAllGradesResponse, error)
	GetAll(context.Context, *GetAllGradesRequest) (*GetAllGradesResponse, error)
	Create(context.Context, *CreateGradeRequest) (*CreateGradeResponse, error)
	Update(context.Context, *UpdateGradeRequest) (*UpdateGradeResponse, error)
	Delete(context.Context, *DeleteGradeRequest) (*DeleteGradeResponse, error)
	mustEmbedUnimplementedGradeServiceServer()
}

// UnimplementedGradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGradeServiceServer struct {
}

func (*UnimplementedGradeServiceServer) Get(context.Context, *GetGradeRequest) (*GetGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGradeServiceServer) GetByGuest(context.Context, *GetGradeRequest) (*GetAllGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGuest not implemented")
}
func (*UnimplementedGradeServiceServer) GetByGraded(context.Context, *GetGradeRequest) (*GetAllGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGraded not implemented")
}
func (*UnimplementedGradeServiceServer) GetAll(context.Context, *GetAllGradesRequest) (*GetAllGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedGradeServiceServer) Create(context.Context, *CreateGradeRequest) (*CreateGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGradeServiceServer) Update(context.Context, *UpdateGradeRequest) (*UpdateGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGradeServiceServer) Delete(context.Context, *DeleteGradeRequest) (*DeleteGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGradeServiceServer) mustEmbedUnimplementedGradeServiceServer() {}

func RegisterGradeServiceServer(s *grpc.Server, srv GradeServiceServer) {
	s.RegisterService(&_GradeService_serviceDesc, srv)
}

func _GradeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).Get(ctx, req.(*GetGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetByGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetByGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/GetByGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetByGuest(ctx, req.(*GetGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetByGraded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetByGraded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/GetByGraded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetByGraded(ctx, req.(*GetGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetAll(ctx, req.(*GetAllGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).Create(ctx, req.(*CreateGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).Update(ctx, req.(*UpdateGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.GradeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).Delete(ctx, req.(*DeleteGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.GradeService",
	HandlerType: (*GradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GradeService_Get_Handler,
		},
		{
			MethodName: "GetByGuest",
			Handler:    _GradeService_GetByGuest_Handler,
		},
		{
			MethodName: "GetByGraded",
			Handler:    _GradeService_GetByGraded_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GradeService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GradeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GradeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GradeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grade_service/grade_service.proto",
}
